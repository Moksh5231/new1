package com.aetna.clinical.controller;

import com.aetna.clinical.common.util.MembersHelper;
import com.aetna.clinical.constant.CaseConstants;
import com.aetna.clinical.constant.TaskConstants;
import com.aetna.clinical.exceptionhandler.InvalidJsonPayloadException;
import com.aetna.clinical.pojo.csr.ShjCompositeReqForCase;
import com.aetna.clinical.pojo.csr.ShjCompositeResponseForCase;
import com.aetna.clinical.pojo.task.ShjCompositeReqForTask;
import com.aetna.clinical.pojo.task.ShjCompositeResponseForTask;
import com.aetna.clinical.pojo.taskrequest.ShjRequest;
import com.aetna.clinical.pojo.verifymember.ShjCompositeReqForVerifyMember;
import com.aetna.clinical.pojo.verifymember.ShjCompositeResponseForVerifyMember;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.util.*;

@RestController
public class TestConnectionController {

    @Autowired
    private MembersHelper memberHelper;

    @Autowired
    @Qualifier("defaultRestTemplate")
    private RestTemplate restTemplate;

    @Value("${SFHC.apic.producer_url}")
    private String apiUrl_SFHC;

    @Value("${ODM.apic.url}")
    private String apiUrl_ODM;

    @Value("${FMS.apic.url}")
    private String apiUrl_FMS;


    private static final Logger logger = LoggerFactory.getLogger(TestConnectionController.class);

    @Autowired
    private ShjFileProcessForTask shjFileProcessForTask;

    @Autowired
    private ShjFileProcessForVerifyMember shjFileProcessForVerifyMember;

    @Autowired
    private ShjFileProcessForCase shjFileProcessForCase;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private ShjValidator shjValidator;

    @PostMapping(value = "/generateToken", consumes = MediaType.MULTIPART_FORM_DATA_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> generateToken( //@RequestParam("x-apitransactionId") String transactionId,
                                           @RequestParam("shjfile") MultipartFile shjfile) {
        try {
            String filePayload = new String(shjfile.getBytes());

            String transactionId = UUID.randomUUID().toString();
            logger.info("Transaction ID: {}", transactionId);


            // make a body for the request for the ODM Service

            logger.info("File Payload: {}", filePayload);
            HttpHeaders httpHeaders = memberHelper.buildHttpHeader();
            httpHeaders.setContentType(MediaType.APPLICATION_JSON);


            if (isValidJsonFile(filePayload)) {
                logger.info("Valid JSON file");
                ShjRequest shjRequest = objectMapper.readValue(filePayload, ShjRequest.class);
                logger.info("SHJ Request: {}", shjRequest);

                String caseActionValue = shjRequest.getShj().stream()
                        .map(shj -> shj.getShjMember().getShjCase().getCaseAction())
                        .findFirst()
                        .orElse(null);
                

                if ("update".equalsIgnoreCase(caseActionValue) ){
                    logger.info("Case Action is update");
                    return processTaskRequest(filePayload, transactionId, shjRequest, httpHeaders);
                } else if("new".equalsIgnoreCase(caseActionValue)){
                    return processVerifyMemberRequest(filePayload, transactionId, shjRequest, httpHeaders);
                }else{
                    logger.error("Invalid Case Action: {}", caseActionValue);
                    return ResponseEntity.badRequest().body("Invalid Case Action: " + caseActionValue);
                }
            }
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            logger.error("Error in generateToken: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error processing request: " + e.getMessage());
        }
    }

    private ResponseEntity<?> processTaskRequest(String filePayload, String transactionId,
                                                 ShjRequest shjRequest, HttpHeaders httpHeaders) {
        try {
            ShjCompositeReqForTask shjCompositeReqForTask =
                    shjFileProcessForTask.payloadprocessForTask(filePayload, transactionId, shjRequest);

            if (shjCompositeReqForTask == null) {
                return ResponseEntity.badRequest().build();
            }

            ResponseEntity<ShjCompositeResponseForTask> response =
                    callShjServiceForTask(shjCompositeReqForTask, httpHeaders, apiUrl_SFHC);

            if (response.getBody() == null) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body("Response body is null from SHJ Service");
            }

            Map<String, Object> responseMapOk = new HashMap<>();
            Map<String, Object> responseMapError = new HashMap<>();
            boolean hasError = false;

            if(response.getBody().getCompositeResponse() != null) {
                for (ShjCompositeResponseForTask.CompositeResponse compositeResponse :
                        response.getBody().getCompositeResponse()) {

                    if (compositeResponse.hasErrors()) {
                        // Handle error response
                        responseMapError.put(compositeResponse.getReferenceId() + "_error",
                                compositeResponse.getErrors());
                        responseMapError.put("httpStatusCode", compositeResponse.getHttpStatusCode());
                        responseMapError.put("transactionId", transactionId);
                        hasError = true;
                    } else if (compositeResponse.getBody() != null) {
                        // Handle success response
                        ShjCompositeResponseForTask.Body body = compositeResponse.getBody();
                        if (TaskConstants.Reference_TASK.equalsIgnoreCase(compositeResponse.getReferenceId())) {
                            responseMapOk.put(compositeResponse.getReferenceId(), body.getId());
                        } else if (body.getRecords() != null && !body.getRecords().isEmpty()) {
                            responseMapOk.put(compositeResponse.getReferenceId(),
                                    body.getRecords().get(0).getId());
                        }
                    }
                    if (hasError) {
                        logger.error("Error in SHJ Service response: {}", compositeResponse.getErrors());
                        return ResponseEntity.badRequest().body(responseMapError);
                    }
                }
                return ResponseEntity.ok(responseMapOk);
            }else {
                logger.error("No composite response found in SHJ Service response");
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body("No composite response found in SHJ Service response");
            }
        } catch (Exception e) {
            logger.error("Error in processTaskRequest: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error processing task request: " + e.getMessage());
        }
    }

    private ResponseEntity<?> processVerifyMemberRequest(String filePayload, String transactionId, ShjRequest shjRequest, HttpHeaders httpHeaders) {
        try {
            ShjCompositeReqForVerifyMember shjCompositeReqForVerifyMember = shjFileProcessForVerifyMember.payloadprocessForVerifyMember(filePayload, transactionId, shjRequest);
            if (shjCompositeReqForVerifyMember == null) {
                return ResponseEntity.badRequest().build();
            }

            logger.info("Request: {}", shjCompositeReqForVerifyMember);
            ResponseEntity<ShjCompositeResponseForVerifyMember> response = callShjServiceForMemberVerify(shjCompositeReqForVerifyMember, httpHeaders, apiUrl_SFHC);

            if (response.getBody() == null) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body("Response body is null from SHJ Service");
            }

            Map<String, Object> responseMapOk = new HashMap<>();
            Map<String, Object> responseMapError = new HashMap<>();
            boolean hasError = false;

            if (response.getBody().getCompositeResponse() != null) {
                for (ShjCompositeResponseForVerifyMember.CompositeResponse compositeResponse :
                        response.getBody().getCompositeResponse()) {

                    if (compositeResponse.getBody() != null &&
                            compositeResponse.getBody().getErrors() != null &&
                            !compositeResponse.getBody().getErrors().isEmpty()) {
                        // Handle error response
                        responseMapError.put(compositeResponse.getReferenceId() + "_error",
                                compositeResponse.getBody().getErrors());
                        responseMapError.put("httpStatusCode", compositeResponse.getHttpStatusCode());
                        responseMapError.put("transactionId", transactionId);
                        hasError = true;
                    } else if (compositeResponse.getBody() != null) {
                        // Handle success response
                        ShjCompositeResponseForVerifyMember.Body body = compositeResponse.getBody();
                        if (body.getRecords() != null && !body.getRecords().isEmpty()
                            && body.getTotalSize() > 0) {
                           responseMapOk.put(compositeResponse.getReferenceId() + "_Verify_Member_Service_",
                                    body.getRecords().get(0).getId());
                           // Call CSR/ CSRD and CASE Service
                           // return callCaseService(filePayload, transactionId, shjRequest, httpHeaders, responseMapOk);
                            return processCaseRequest(filePayload, transactionId, shjRequest, httpHeaders,
                                    responseMapOk);
                        } else if(compositeResponse.getHttpStatusCode() == 200
                                && body.getTotalSize() == 0) {
                            // Call Foundational Model service.
                            // return callFoundationalModelService(transactionId, shjRequest, responseMapOk);
                            return callFundationalModelService(filePayload, transactionId, shjRequest,httpHeaders, responseMapOk);
                        }
                    }
                    if (hasError) {
                        logger.error("Error in SHJ Service response: {}", compositeResponse.getBody().getErrors());
                        return ResponseEntity.badRequest().body(responseMapError);
                    }
                }
                return ResponseEntity.ok(responseMapOk);
            } else {
                logger.error("No composite response found in SHJ Service response");
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body("No composite response found in SHJ Service response");
            }
        } catch (Exception e) {
            logger.error("Error in processVerifyMemberRequest: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error processing verify member request: " + e.getMessage());
        }
    }

    private ResponseEntity<?> callFundationalModelService(String filePayload, String transactionId, ShjRequest shjRequest, HttpHeaders httpHeaders, Map<String, Object> responseMapOk) {

        logger.info("Calling Foundational Model Service");


        String cmmId = shjRequest.getShj().get(0).getShjMember().getMemberIdentifier().getMembershipId();
        String proxyId = shjRequest.getShj().get(0).getShjMember().getMemberIdentifier().getProxyId();

        String url = apiUrl_FMS.replace(":?1",cmmId)
                .replace(":?2",proxyId);
        logger.info("Foundational model service -> URL: {}", url);
        ResponseEntity<String> rawResponse = restTemplate.exchange(
                url, HttpMethod.GET, null, String.class);
        logger.info("Raw Response from Foundational Model service: {}", rawResponse.getBody());

        if (rawResponse.getStatusCode() == HttpStatus.OK && rawResponse.getBody() != null
                && rawResponse.getBody().contains("responseCode")) {
            return processCaseRequest(filePayload, transactionId, shjRequest, httpHeaders,
                    responseMapOk);
        } else {
            logger.error("Error in Foundational Model service: {}", rawResponse.getBody());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error in Foundational Model service: " + rawResponse.getBody());
        }
    }

    private ResponseEntity<?> processCaseRequest(String filePayload, String transactionId, ShjRequest shjRequest, HttpHeaders httpHeaders, Map<String, Object> responseMapOk) {

        ShjCompositeReqForCase shjCompositeReqForCase = shjFileProcessForCase.payloadprocessForCSR(filePayload, transactionId, shjRequest);
        if (shjCompositeReqForCase == null) {
            return ResponseEntity.badRequest().build();
        }
        logger.info("Request: {}", shjCompositeReqForCase);
        ResponseEntity<ShjCompositeResponseForCase> response = callShjServiceForCase(shjCompositeReqForCase, httpHeaders, apiUrl_SFHC);
        if (response.getBody() == null) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Response body is null from SHJ Service");
        }

        boolean hasError = false;
        Map<String, Object> responseMapError = new HashMap<>();

        if(response.getBody().getCompositeResponse()!=null){
            for(ShjCompositeResponseForCase.CompositeResponse compositeResponse :
                    response.getBody().getCompositeResponse()) {

                if(compositeResponse.getBody() != null &&
                        compositeResponse.getHttpStatusCode() == 400 &&
                        compositeResponse.getBody().getErrors().length > 0) {
                    responseMapError.put(compositeResponse.getReferenceId() + "_error_in_Case_Service",
                            compositeResponse.getBody().getErrors());
                    responseMapError.put("httpStatusCode", compositeResponse.getHttpStatusCode());
                    responseMapError.put("transactionId", transactionId);
                    responseMapError.put("Status", "Error");
                    hasError = true;
                } else if(compositeResponse.getBody() != null) {
                    ShjCompositeResponseForCase.Body body = compositeResponse.getBody();
                    if(!compositeResponse.getReferenceId().equalsIgnoreCase(CaseConstants.Reference_CASE) &&
                            !compositeResponse.getReferenceId().equalsIgnoreCase(CaseConstants.Reference_CSR_ID) &&
                            !compositeResponse.getReferenceId().equalsIgnoreCase(CaseConstants.Reference_CSRDetails) &&
                            body.getRecords() != null && !body.getRecords().isEmpty()
                            && body.getTotalSize() > 0) {
                        responseMapOk.put(compositeResponse.getReferenceId(),
                                body.getRecords().get(0).getId());
                    }else if(compositeResponse.getBody().getId() !=null){
                        responseMapOk.put(compositeResponse.getReferenceId(),
                                compositeResponse.getBody().getId());
                    }
                }
                if (hasError) {
                    logger.error("Error in SHJ Service response: {}", compositeResponse.getBody().getErrors());
                    return ResponseEntity.badRequest().body(responseMapError);
                }
            }
            responseMapOk.put("transactionId", "transactionId");
            responseMapOk.put("Status", "Success");
            return ResponseEntity.ok(responseMapOk);
        }else {
            logger.error("No composite response found in SHJ Service response");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("No composite response found in SHJ Service response");
        }
    }


    private boolean isValidJsonFile(String filePayload) {
        try {
            objectMapper.readTree(filePayload);
            return true;
        } catch (JsonProcessingException e) {
            logger.error("Invalid JSON payload: {}", filePayload);
            throw new InvalidJsonPayloadException("Invalid JSON payload", e);
        } catch (Exception e) {
            logger.error("Error processing JSON file: {}", filePayload, e);
            throw new RuntimeException("Error processing JSON file", e);
        }
    }

    private ResponseEntity<ShjCompositeResponseForTask> callShjServiceForTask(ShjCompositeReqForTask shjCompositeReqForTask, HttpHeaders httpHeaders, String apiUrl) {
        return callSHJService(shjCompositeReqForTask, httpHeaders, apiUrl, ShjCompositeResponseForTask.class);
    }

    private ResponseEntity<ShjCompositeResponseForVerifyMember> callShjServiceForMemberVerify(ShjCompositeReqForVerifyMember shjCompositeReqForVerifyMember, HttpHeaders httpHeaders, String apiUrl) {
        return callSHJService(shjCompositeReqForVerifyMember, httpHeaders, apiUrl, ShjCompositeResponseForVerifyMember.class);
    }

    private ResponseEntity<ShjCompositeResponseForCase> callShjServiceForCase(ShjCompositeReqForCase shjCompositeReqForCase, HttpHeaders httpHeaders, String apiUrl) {
        return callSHJService(shjCompositeReqForCase, httpHeaders, apiUrl, ShjCompositeResponseForCase.class);
    }

    private <T, R> ResponseEntity<R> callSHJService(T requestObject, HttpHeaders httpHeaders,
                                                    String apiUrl, Class<R> responseType) {
        try {
            String requestJson = objectMapper.writeValueAsString(requestObject);
            HttpEntity<String> membersEntity = new HttpEntity<>(requestJson, httpHeaders);
            ResponseEntity<String> rawResponse = restTemplate.exchange(
                    apiUrl, HttpMethod.POST, membersEntity, String.class);
            logger.info("Raw Response from SHJ service: {}", rawResponse.getBody());
           // logger.debug("Raw Response from SHJ service: {}", rawResponse.getBody());

            // Configure ObjectMapper with custom settings
            ObjectMapper lenientMapper = new ObjectMapper();
            lenientMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            lenientMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);

            // Parse the response
            R parsedResponse = lenientMapper.readValue(rawResponse.getBody(), responseType);
            logger.info("Parsed Response: {}", parsedResponse.toString());

            return ResponseEntity.status(rawResponse.getStatusCode())
                    .headers(rawResponse.getHeaders())
                    .body(parsedResponse);
        } catch (Exception e) {
            logger.error("Error in callSHJService: {}", e.getMessage(), e);
            throw new RuntimeException("Error processing SHJ service response", e);
        }
    }
}
