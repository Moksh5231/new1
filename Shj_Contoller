package com.aetna.clinical.controller;

import com.aetna.clinical.common.util.MembersHelper;
import com.aetna.clinical.exceptionhandler.InvalidJsonPayloadException;
import com.aetna.clinical.pojo.csr.ShjCompositeReqForCase;
import com.aetna.clinical.pojo.csr.ShjCompositeResponseForCase;
import com.aetna.clinical.pojo.task.ShjCompositeReqForTask;
import com.aetna.clinical.pojo.task.ShjCompositeResponseForTask;
import com.aetna.clinical.pojo.taskrequest.ShjRequest;
import com.aetna.clinical.pojo.verifymember.ShjCompositeReqForVerifyMember;
import com.aetna.clinical.pojo.verifymember.ShjCompositeResponseForVerifyMember;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.Optional;

@RestController
public class TestConnectionController {


    @Autowired
    private MembersHelper memberHelper;

    @Autowired
    @Qualifier("defaultRestTemplate")
    private  RestTemplate restTemplate;

    /*@Autowired
    private ShjFileProcess shjFileProcess;

    @Autowired
    private ObjectMapper objectMapper;*/

    @Value("${SFHC.apic.producer_url}")
    private String apiUrl;

    private static Logger logger = LoggerFactory.getLogger(TestConnectionController.class);

    @Autowired
    private ShjFileProcessForTask shjFileProcessForTask;

    @Autowired
    private ShjFileProcessForVerifyMember shjFileProcessForVerifyMember;

    @Autowired
    private ShjFileProcessForCase shjFileProcessForCase;
    @Autowired
    private ObjectMapper objectMapper;


    @GetMapping(value="/generateToken", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<?> generateToken(@RequestParam("x-apitransactionId") String transactionId,
                                                @RequestParam("shjfile") MultipartFile shjfile) throws Exception {
        try {
            String filePayload = new String(shjfile.getBytes());
            logger.info("File Payload: " + filePayload);
            HttpHeaders httpHeaders = memberHelper.buildHttpHeader();
            httpHeaders.setContentType(MediaType.APPLICATION_JSON);

            if (IsValidJsonFile(filePayload)) {
                ShjRequest shjRequest = objectMapper.readValue(filePayload, ShjRequest.class);
                logger.info("SHJ Request: " + shjRequest);

                String caseActionValue = shjRequest.getShj().stream()
                        .map(shj -> shj.getShjMember().getShjCase().getCaseAction())
                        .findFirst()
                        .orElse(null);

                if ("update".equalsIgnoreCase(caseActionValue)) {
                    logger.info("Case Action is update");
                    return processTaskRequest(filePayload, transactionId, shjRequest, httpHeaders);
                } else if ("new".equalsIgnoreCase(caseActionValue)) {
                    return processVerifyMemberRequest(filePayload, transactionId, shjRequest, httpHeaders);
                }
            }
            return ResponseEntity.badRequest().build();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private ResponseEntity<?> processTaskRequest(String filePayload, String transactionId, ShjRequest shjRequest, HttpHeaders httpHeaders) throws Exception {
        ShjCompositeReqForTask shjCompositeReqForTask = shjFileProcessForTask.payloadprocessForTask(filePayload, transactionId, shjRequest);
        if (shjCompositeReqForTask != null) {
            logger.info("Request: " + shjCompositeReqForTask);
            ResponseEntity<ShjCompositeResponseForTask> response = CallShjServiceForTask(shjCompositeReqForTask, httpHeaders, apiUrl);
            logger.info("Response: " + response.getBody());
            return response;
        }
        return ResponseEntity.badRequest().build();
    }

    private ResponseEntity<?> processVerifyMemberRequest(String filePayload, String transactionId, ShjRequest shjRequest, HttpHeaders httpHeaders) throws Exception {
        ShjCompositeReqForVerifyMember shjCompositeReqForVerifyMember = shjFileProcessForVerifyMember.payloadprocessForVerifyMember(filePayload, transactionId, shjRequest);
        if (shjCompositeReqForVerifyMember != null) {
            logger.info("Request: " + shjCompositeReqForVerifyMember);
            ResponseEntity<ShjCompositeResponseForVerifyMember> response = CallShjServiceForMemberVerify(shjCompositeReqForVerifyMember, httpHeaders, apiUrl);
            logger.info("Response: " + response.getBody());

            ShjCompositeReqForCase shjCompositeReqForCase = shjFileProcessForCase.payloadprocessForCSR(filePayload, transactionId, shjRequest);
            logger.info("Request: " + shjCompositeReqForCase);
            ResponseEntity<ShjCompositeResponseForCase> responseForCase = CallShjServiceForCase(shjCompositeReqForCase, httpHeaders, apiUrl);
            logger.info("Response: " + responseForCase.getBody());
            return responseForCase;
        }
        return ResponseEntity.badRequest().build();
    }


    private boolean IsValidJsonFile(String filePayload) {
        try {
            objectMapper.readTree(filePayload);
            return true;
        } catch (JsonProcessingException e) {
            logger.error("Invalid JSON payload: {}", filePayload);
            throw new InvalidJsonPayloadException("Invalid JSON payload", e);
        } catch (Exception e) {
            logger.error("Error processing JSON file: {}", filePayload, e);
            throw new RuntimeException("Error processing JSON file", e);
        }

    }

    private ResponseEntity<ShjCompositeResponseForTask> CallShjServiceForTask(ShjCompositeReqForTask shjCompositeReqForTask, HttpHeaders httpHeaders, String apiUrl) {
        return callSHJService(shjCompositeReqForTask, httpHeaders, apiUrl, ShjCompositeResponseForTask.class);
    }

    private ResponseEntity<ShjCompositeResponseForVerifyMember> CallShjServiceForMemberVerify(ShjCompositeReqForVerifyMember shjCompositeReqForVerifyMember, HttpHeaders httpHeaders, String apiUrl) {
        return callSHJService(shjCompositeReqForVerifyMember, httpHeaders, apiUrl, ShjCompositeResponseForVerifyMember.class);
    }

    private ResponseEntity<ShjCompositeResponseForCase> CallShjServiceForCase(ShjCompositeReqForCase shjCompositeReqForCase, HttpHeaders httpHeaders, String apiUrl) {
        return callSHJService(shjCompositeReqForCase, httpHeaders, apiUrl, ShjCompositeResponseForCase.class);
    }

    private <T,R> ResponseEntity<R> callSHJService(T requestObject, HttpHeaders httpHeaders, String apiUrl,Class<R> responseType) {
        try {
            String requestJson = objectMapper.writeValueAsString(requestObject);
            HttpEntity<String> membersEntity = new HttpEntity<>(requestJson, httpHeaders);
            return restTemplate.exchange(apiUrl, HttpMethod.POST, membersEntity, responseType);
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }
}
