Code:
-----
package com.aetna.clinical.pojo.task;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.*;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class ShjCompositeResponseForTask {

    @JsonProperty("compositeResponse")
    @JsonDeserialize(using = CompositeResponseDeserializer.class)
    private List<CompositeResponse> compositeResponse;

    // Getters and setters
    public List<CompositeResponse> getCompositeResponse() {
        return compositeResponse;
    }

    public void setCompositeResponse(List<CompositeResponse> compositeResponse) {
        this.compositeResponse = compositeResponse;
    }

    public static class CompositeResponse {
        private Body body;
        private Map<String, String> httpHeaders;
        private int httpStatusCode;
        private String referenceId;

        // Getters and setters
        public Body getBody() { return body; }
        public void setBody(Body body) { this.body = body; }
        public Map<String, String> getHttpHeaders() { return httpHeaders; }
        public void setHttpHeaders(Map<String, String> httpHeaders) { this.httpHeaders = httpHeaders; }
        public int getHttpStatusCode() { return httpStatusCode; }
        public void setHttpStatusCode(int httpStatusCode) { this.httpStatusCode = httpStatusCode; }
        public String getReferenceId() { return referenceId; }
        public void setReferenceId(String referenceId) { this.referenceId = referenceId; }
    }

    // Inner classes for Body, Record, Attributes, Error remain the same as before
    // ...
}


-----------
New class:
---------
package com.aetna.clinical.pojo.task;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import java.io.IOException;
import java.util.*;

public class CompositeResponseDeserializer extends StdDeserializer<List<ShjCompositeResponseForTask.CompositeResponse>> {

    public CompositeResponseDeserializer() {
        this(null);
    }

    public CompositeResponseDeserializer(Class<?> vc) {
        super(vc);
    }

    @Override
    public List<ShjCompositeResponseForTask.CompositeResponse> deserialize(
            JsonParser p, DeserializationContext ctxt) throws IOException {
        
        ObjectMapper mapper = (ObjectMapper) p.getCodec();
        JsonNode node = mapper.readTree(p);
        
        List<ShjCompositeResponseForTask.CompositeResponse> responses = new ArrayList<>();
        
        if (node.isArray()) {
            for (JsonNode compositeNode : node) {
                responses.add(parseCompositeResponse(mapper, compositeNode));
            }
        }
        
        return responses;
    }

    private ShjCompositeResponseForTask.CompositeResponse parseCompositeResponse(
            ObjectMapper mapper, JsonNode compositeNode) throws IOException {
        
        ShjCompositeResponseForTask.CompositeResponse response = 
            new ShjCompositeResponseForTask.CompositeResponse();
        
        // Handle body which might be array or object
        JsonNode bodyNode = compositeNode.get("body");
        if (bodyNode != null) {
            if (bodyNode.isArray() && bodyNode.size() > 0) {
                // Take first element if body is an array
                response.setBody(mapper.treeToValue(bodyNode.get(0), 
                    ShjCompositeResponseForTask.Body.class));
            } else {
                response.setBody(mapper.treeToValue(bodyNode, 
                    ShjCompositeResponseForTask.Body.class));
            }
        }
        
        // Handle other fields
        if (compositeNode.has("httpHeaders")) {
            response.setHttpHeaders(mapper.convertValue(
                compositeNode.get("httpHeaders"), 
                new TypeReference<Map<String, String>>() {}));
        }
        
        if (compositeNode.has("httpStatusCode")) {
            response.setHttpStatusCode(compositeNode.get("httpStatusCode").asInt());
        }
        
        if (compositeNode.has("referenceId")) {
            response.setReferenceId(compositeNode.get("referenceId").asText());
        }
        
        return response;
    }
}

----------------
private <T, R> ResponseEntity<R> callSHJService(T requestObject, HttpHeaders httpHeaders, 
        String apiUrl, Class<R> responseType) {
    try {
        String requestJson = objectMapper.writeValueAsString(requestObject);
        HttpEntity<String> membersEntity = new HttpEntity<>(requestJson, httpHeaders);
        ResponseEntity<String> rawResponse = restTemplate.exchange(
            apiUrl, HttpMethod.POST, membersEntity, String.class);
        
        logger.debug("Raw Response from SHJ service: {}", rawResponse.getBody());

        // Configure ObjectMapper with custom settings
        ObjectMapper lenientMapper = new ObjectMapper();
        lenientMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        lenientMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
        
        // Register our custom deserializer
        SimpleModule module = new SimpleModule();
        module.addDeserializer(
            new TypeReference<List<ShjCompositeResponseForTask.CompositeResponse>>() {}.getType(),
            new CompositeResponseDeserializer());
        lenientMapper.registerModule(module);

        // Parse the response
        R parsedResponse = lenientMapper.readValue(rawResponse.getBody(), responseType);
        
        return ResponseEntity.status(rawResponse.getStatusCode())
                .headers(rawResponse.getHeaders())
                .body(parsedResponse);
    } catch (Exception e) {
        logger.error("Error in callSHJService: {}", e.getMessage(), e);
        throw new RuntimeException("Error processing SHJ service response", e);
    }
}
