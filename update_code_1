Contoller
-------
package com.aetna.clinical.controller;

import com.aetna.clinical.common.util.MembersHelper;
import com.aetna.clinical.constant.TaskConstants;
import com.aetna.clinical.exceptionhandler.InvalidJsonPayloadException;
import com.aetna.clinical.pojo.csr.ShjCompositeReqForCase;
import com.aetna.clinical.pojo.csr.ShjCompositeResponseForCase;
import com.aetna.clinical.pojo.task.ShjCompositeReqForTask;
import com.aetna.clinical.pojo.task.ShjCompositeResponseForTask;
import com.aetna.clinical.pojo.taskrequest.ShjRequest;
import com.aetna.clinical.pojo.verifymember.ShjCompositeReqForVerifyMember;
import com.aetna.clinical.pojo.verifymember.ShjCompositeResponseForVerifyMember;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.*;

@RestController
public class TestConnectionController {

    @Autowired
    private MembersHelper memberHelper;

    @Autowired
    @Qualifier("defaultRestTemplate")
    private RestTemplate restTemplate;

    @Value("${SFHC.apic.producer_url}")
    private String apiUrl;

    private static final Logger logger = LoggerFactory.getLogger(TestConnectionController.class);

    @Autowired
    private ShjFileProcessForTask shjFileProcessForTask;

    @Autowired
    private ShjFileProcessForVerifyMember shjFileProcessForVerifyMember;

    @Autowired
    private ShjFileProcessForCase shjFileProcessForCase;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private ShjValidator shjValidator;

    @GetMapping(value = "/generateToken", consumes = MediaType.MULTIPART_FORM_DATA_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> generateToken(@RequestParam("x-apitransactionId") String transactionId,
                                          @RequestParam("shjfile") MultipartFile shjfile) {
        try {
            String filePayload = new String(shjfile.getBytes());
            logger.info("File Payload: {}", filePayload);
            HttpHeaders httpHeaders = memberHelper.buildHttpHeader();
            httpHeaders.setContentType(MediaType.APPLICATION_JSON);

            if (isValidJsonFile(filePayload)) {
                ShjRequest shjRequest = objectMapper.readValue(filePayload, ShjRequest.class);
                logger.info("SHJ Request: {}", shjRequest);

                String caseActionValue = shjRequest.getShj().stream()
                        .map(shj -> shj.getShjMember().getShjCase().getCaseAction())
                        .findFirst()
                        .orElse(null);

                String shjTxnId = shjRequest.getShj().stream()
                        .map(shj -> shj.getShjMember().getShjCase().getShjTxnID())
                        .findFirst()
                        .orElse(null);

                if ("update".equalsIgnoreCase(caseActionValue) {
                    logger.info("Case Action is update");
                    return processTaskRequest(filePayload, transactionId, shjRequest, httpHeaders);
                } else if ("new".equalsIgnoreCase(caseActionValue)) {
                    return processVerifyMemberRequest(filePayload, transactionId, shjRequest, httpHeaders);
                }
            }
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            logger.error("Error in generateToken: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error processing request: " + e.getMessage());
        }
    }

    private ResponseEntity<?> processTaskRequest(String filePayload, String transactionId, ShjRequest shjRequest, HttpHeaders httpHeaders) {
        try {
            ShjCompositeReqForTask shjCompositeReqForTask = shjFileProcessForTask.payloadprocessForTask(filePayload, transactionId, shjRequest);
            if (shjCompositeReqForTask == null) {
                return ResponseEntity.badRequest().build();
            }

            logger.info("Request: {}", shjCompositeReqForTask);
            ResponseEntity<ShjCompositeResponseForTask> response = callShjServiceForTask(shjCompositeReqForTask, httpHeaders, apiUrl);

            if (response.getBody() == null) {
                logger.error("Response body is null");
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Response body is null from SHJ Service");
            }

            Map<String, String> responseMap = new HashMap<>();
            if (response.getStatusCode().is2xxSuccessful()) {
                for (ShjCompositeResponseForTask.CompositeResponse compositeResponse :
                        Optional.ofNullable(response.getBody().getCompositeResponse()).orElse(Collections.emptyList())) {

                    ShjCompositeResponseForTask.Body body = compositeResponse.getBody();
                    if (body != null) {
                        if (body.getTotalSize() > 0 && compositeResponse.getHttpStatusCode() == 200) {
                            if (body.getRecords() != null && !body.getRecords().isEmpty()
                                    && !TaskConstants.Reference_TASK.equalsIgnoreCase(compositeResponse.getReferenceId())) {
                                responseMap.put(compositeResponse.getReferenceId(), body.getRecords().get(0).getId());
                            } else if (body.getRecords() != null && !body.getRecords().isEmpty()
                                    && TaskConstants.Reference_TASK.equalsIgnoreCase(compositeResponse.getReferenceId())) {
                                responseMap.put(compositeResponse.getReferenceId(), body.getId());
                            } else {
                                logger.info("No records found in Task response");
                            }
                        }
                    }
                }
                return ResponseEntity.ok(responseMap);
            }
            return response;
        } catch (Exception e) {
            logger.error("Error in processTaskRequest: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error processing task request: " + e.getMessage());
        }
    }

    private ResponseEntity<?> processVerifyMemberRequest(String filePayload, String transactionId, ShjRequest shjRequest, HttpHeaders httpHeaders) {
        try {
            ShjCompositeReqForVerifyMember shjCompositeReqForVerifyMember = shjFileProcessForVerifyMember.payloadprocessForVerifyMember(filePayload, transactionId, shjRequest);
            if (shjCompositeReqForVerifyMember == null) {
                return ResponseEntity.badRequest().build();
            }

            logger.info("Request: {}", shjCompositeReqForVerifyMember);
            ResponseEntity<ShjCompositeResponseForVerifyMember> response = callShjServiceForMemberVerify(shjCompositeReqForVerifyMember, httpHeaders, apiUrl);
            logger.info("Response: {}", response.getBody());

            if (response.getStatusCode().is2xxSuccessful() &&
                    response.getBody() != null &&
                    response.getBody().getCompositeResponse() != null &&
                    !response.getBody().getCompositeResponse().isEmpty() &&
                    response.getBody().getCompositeResponse().get(0).getBody() != null &&
                    response.getBody().getCompositeResponse().get(0).getBody().getTotalSize() > 0 &&
                    response.getBody().getCompositeResponse().get(0).getHttpStatusCode() == 200) {
                return callCaseService(filePayload, transactionId, shjRequest, httpHeaders);
            } else {
                logger.info("No records found in VerifyMember response");
                return ResponseEntity.ok(response);
            }
        } catch (Exception e) {
            logger.error("Error in processVerifyMemberRequest: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error processing verify member request: " + e.getMessage());
        }
    }

    private ResponseEntity<ShjCompositeResponseForCase> callCaseService(String filePayload, String transactionId, ShjRequest shjRequest, HttpHeaders httpHeaders) {
        try {
            ShjCompositeReqForCase shjCompositeReqForCase = shjFileProcessForCase.payloadprocessForCSR(filePayload, transactionId, shjRequest);
            logger.info("Request: {}", shjCompositeReqForCase);
            ResponseEntity<ShjCompositeResponseForCase> responseForCase = callShjServiceForCase(shjCompositeReqForCase, httpHeaders, apiUrl);
            logger.info("Response: {}", responseForCase.getBody());
            return responseForCase;
        } catch (Exception e) {
            logger.error("Error in callCaseService: {}", e.getMessage(), e);
            throw new RuntimeException("Error calling case service", e);
        }
    }

    private boolean isValidJsonFile(String filePayload) {
        try {
            objectMapper.readTree(filePayload);
            return true;
        } catch (JsonProcessingException e) {
            logger.error("Invalid JSON payload: {}", filePayload);
            throw new InvalidJsonPayloadException("Invalid JSON payload", e);
        } catch (Exception e) {
            logger.error("Error processing JSON file: {}", filePayload, e);
            throw new RuntimeException("Error processing JSON file", e);
        }
    }

    private ResponseEntity<ShjCompositeResponseForTask> callShjServiceForTask(ShjCompositeReqForTask shjCompositeReqForTask, HttpHeaders httpHeaders, String apiUrl) {
        return callSHJService(shjCompositeReqForTask, httpHeaders, apiUrl, ShjCompositeResponseForTask.class);
    }

    private ResponseEntity<ShjCompositeResponseForVerifyMember> callShjServiceForMemberVerify(ShjCompositeReqForVerifyMember shjCompositeReqForVerifyMember, HttpHeaders httpHeaders, String apiUrl) {
        return callSHJService(shjCompositeReqForVerifyMember, httpHeaders, apiUrl, ShjCompositeResponseForVerifyMember.class);
    }

    private ResponseEntity<ShjCompositeResponseForCase> callShjServiceForCase(ShjCompositeReqForCase shjCompositeReqForCase, HttpHeaders httpHeaders, String apiUrl) {
        return callSHJService(shjCompositeReqForCase, httpHeaders, apiUrl, ShjCompositeResponseForCase.class);
    }

    private <T, R> ResponseEntity<R> callSHJService(T requestObject, HttpHeaders httpHeaders, String apiUrl, Class<R> responseType) {
        try {
            String requestJson = objectMapper.writeValueAsString(requestObject);
            HttpEntity<String> membersEntity = new HttpEntity<>(requestJson, httpHeaders);
            ResponseEntity<String> rawResponse = restTemplate.exchange(apiUrl, HttpMethod.POST, membersEntity, String.class);
            logger.info("Raw Response from SHJ service: {}", rawResponse.getBody());

            // Configure ObjectMapper to be more lenient
            ObjectMapper lenientMapper = new ObjectMapper();
            lenientMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            lenientMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);

            R parsedResponse = lenientMapper.readValue(rawResponse.getBody(), responseType);
            return ResponseEntity.status(rawResponse.getStatusCode())
                    .headers(rawResponse.getHeaders())
                    .body(parsedResponse);
        } catch (JsonProcessingException e) {
            logger.error("Error converting request object to JSON: {}", e.getMessage());
            throw new RuntimeException("Error Processing JSON Request", e);
        } catch (RestClientException e) {
            logger.error("Error calling SHJ service: {}", e.getMessage());
            throw new RuntimeException("Error calling SHJ service", e);
        } catch (IOException e) {
            logger.error("IO Error during SHJ service call: {}", e.getMessage());
            throw new RuntimeException("IO Error during SHJ service call", e);
        }
    }
}

------------
Pojo
-----
package com.aetna.clinical.pojo.task;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import java.util.List;
import java.util.Map;

@JsonInclude(Include.NON_NULL)
public class ShjCompositeResponseForTask {

    private List<CompositeResponse> compositeResponse;

    public List<CompositeResponse> getCompositeResponse() {
        return compositeResponse;
    }

    public void setCompositeResponse(List<CompositeResponse> compositeResponse) {
        this.compositeResponse = compositeResponse;
    }

    @JsonInclude(Include.NON_NULL)
    public static class CompositeResponse {
        private Body body;
        private Map<String, String> httpHeaders;
        private int httpStatusCode;
        private String referenceId;

        public Body getBody() {
            return body;
        }

        public void setBody(Body body) {
            this.body = body;
        }

        public Map<String, String> getHttpHeaders() {
            return httpHeaders;
        }

        public void setHttpHeaders(Map<String, String> httpHeaders) {
            this.httpHeaders = httpHeaders;
        }

        public int getHttpStatusCode() {
            return httpStatusCode;
        }

        public void setHttpStatusCode(int httpStatusCode) {
            this.httpStatusCode = httpStatusCode;
        }

        public String getReferenceId() {
            return referenceId;
        }

        public void setReferenceId(String referenceId) {
            this.referenceId = referenceId;
        }
    }

    @JsonInclude(Include.NON_NULL)
    public static class Body {
        private int totalSize;
        private boolean done;
        private List<Record> records;
        private String id;
        private boolean success;
        private List<Error> errors;
        private boolean created;

        public int getTotalSize() {
            return totalSize;
        }

        public void setTotalSize(int totalSize) {
            this.totalSize = totalSize;
        }

        public boolean isDone() {
            return done;
        }

        public void setDone(boolean done) {
            this.done = done;
        }

        public List<Record> getRecords() {
            return records;
        }

        public void setRecords(List<Record> records) {
            this.records = records;
        }

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public boolean isSuccess() {
            return success;
        }

        public void setSuccess(boolean success) {
            this.success = success;
        }

        public List<Error> getErrors() {
            return errors;
        }

        public void setErrors(List<Error> errors) {
            this.errors = errors;
        }

        public boolean isCreated() {
            return created;
        }

        public void setCreated(boolean created) {
            this.created = created;
        }
    }

    public static class Record {
        private Attributes attributes;

        @JsonProperty("Id")
        private String id;

        public Attributes getAttributes() {
            return attributes;
        }

        public void setAttributes(Attributes attributes) {
            this.attributes = attributes;
        }

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }
    }

    public static class Attributes {
        private String type;
        private String url;

        public String getType() {
            return type;
        }

        public void setType(String type) {
            this.type = type;
        }

        public String getUrl() {
            return url;
        }

        public void setUrl(String url) {
            this.url = url;
        }
    }

    public static class Error {
        private String errorCode;
        private String message;

        public String getErrorCode() {
            return errorCode;
        }

        public void setErrorCode(String errorCode) {
            this.errorCode = errorCode;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }
    }
}


---

Error in processTaskRequest: Error Processing JSON Request

java.lang.RuntimeException: Error Processing JSON Request
	at com.aetna.clinical.controller.TestConnectionController.callSHJService(TestConnectionController.java:231)
	at com.aetna.clinical.controller.TestConnectionController.callShjServiceForTask(TestConnectionController.java:202)
	at com.aetna.clinical.controller.TestConnectionController.processTaskRequest(TestConnectionController.java:110)
	at com.aetna.clinical.controller.TestConnectionController.generateToken(TestConnectionController.java:87)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:175)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:175)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:175)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:175)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1736)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.aetna.clinical.pojo.task.ShjCompositeResponseForTask$Body` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: (String)"{"compositeResponse":[{"body":{"totalSize":0,"done":true,"records":[]},"httpHeaders":{},"httpStatusCode":200,"referenceId":"refMemberPlanId"},{"body":{"totalSize":1,"done":true,"records":[{"attributes":{"type":"RecordType","url":"/services/data/v62.0/sobjects/RecordType/012We000000AqwbIAC"},"Id":"012We000000AqwbIAC"}]},"httpHeaders":{},"httpStatusCode":200,"referenceId":"refRecTypeId"},{"body":{"totalSize":0,"done":true,"records":[]},"httpHeaders":{},"httpStatusCode":200,"referenceId":"refAccoun"[truncated 486 chars]; line: 1, column: 629] (through reference chain: com.aetna.clinical.pojo.task.ShjCompositeResponseForTask["compositeResponse"]->java.util.ArrayList[4]->com.aetna.clinical.pojo.task.ShjCompositeResponseForTask$CompositeResponse["body"])
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1752)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1526)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1473)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(BeanDeserializer.java:656)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:211)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:314)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:177)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer._deserializeFromArray(CollectionDeserializer.java:359)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:244)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:28)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:314)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:177)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4825)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3772)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3740)
	at com.aetna.clinical.controller.TestConnectionController.callSHJService(TestConnectionController.java:225)
	... 53 common frames omitted
