package com.aetna.clinical.exceptionhandler;

import com.aetna.clinical.pojo.taskrequest.ShjRequest;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

public abstract class ShjRequestProcessor<Req,Res> {

    protected final Logger logger = LoggerFactory.getLogger(getClass());
    protected final ObjectMapper objectMapper;

    protected final RestTemplate restTemplate;

    protected ShjRequestProcessor(ObjectMapper objectMapper, RestTemplate restTemplate) {
        this.objectMapper = objectMapper;
        this.restTemplate = restTemplate;
    }

    public ResponseEntity<?> process(String payload, String transactionId, HttpHeaders headers){
        try{
            ShjRequest request = parseRequest(payload);
            validateRequest(request, transactionId);
            Req serviceRequest = buildServiceRequest(request, transactionId);
            return executeServiceCall(serviceRequest, headers, transactionId);
        }catch (ValidationException e){
            logger.error("Validation error: {}", e.getMessage());
            throw  e;
        }catch (Exception e){
            logger.error("Error processing failed: {}", e.getMessage(), e);
            throw new ServiceException("Process failed: "+ e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    protected ShjRequest parseRequest(String payload) throws JsonProcessingException {
        return objectMapper.readValue(payload, ShjRequest.class);
    }

    protected abstract void validateRequest(ShjRequest request, String transactionId);

    protected abstract Req buildServiceRequest(ShjRequest request, String transactionId);

    protected abstract ResponseEntity<?> executeServiceCall(Req request, HttpHeaders headers, String transactionId) throws JsonProcessingException;
}
