package com.aetna.clinical.common.util;

import com.aetna.clinical.common.dto.response.OdmResponse;
import com.aetna.clinical.common.dto.taskrequest.ShjRequest;
import com.aetna.clinical.common.exceptions.ServiceException;
import com.aetna.clinical.common.service.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.Map;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ShjFileProcessorTest {

    @Mock
    private ObjectMapper objectMapper;
    @Mock
    private TaskProcessor taskProcessor;
    @Mock
    private VerifyMemberProcessor verifyMemberProcessor;
    @Mock
    private CaseProcessor caseProcessor;
    @Mock
    private OdmService odmService;
    @Mock
    private PayloadTransformer payloadTransformer;
    @Mock
    private FoundationModelService foundationModelService;
    
    @InjectMocks
    private ShjFileProcessor shjFileProcessor;

    private final String testApiUrl = "http://test-odm-url.com";
    private final String testFoundationUrl = "http://test-foundation-url.com";
    private final String transactionId = UUID.randomUUID().toString();
    private final String validJson = "{\"shj\":[{\"shjMember\":{\"memberIdentifier\":{\"membershipId\":\"123\",\"proxyId\":\"456\"},\"shjCase\":{\"caseAction\":\"new\",\"shjID\":\"789\"}}}]}";

    @BeforeEach
    void setUp() throws Exception {
        // Common mock setup
        when(objectMapper.readValue(any(byte[].class), eq(ShjRequest.class)))
            .thenReturn(createTestShjRequest());
        when(objectMapper.writeValueAsString(any())).thenReturn("{}");
    }

    // ========== SUCCESS SCENARIOS ==========

    @Test
    void processFile_UpdateCaseWithTask_Success() throws Exception {
        // Setup
        MockMultipartFile file = createTestFile("test.json", validJson);
        OdmResponse odmResponse = createOdmResponse(true, false);
        
        when(odmService.callOdmService(any(), any(), any(), any()))
            .thenReturn(ResponseEntity.ok(odmResponse));
        when(taskProcessor.process(any(), any())).thenReturn(ResponseEntity.ok().build());

        // Execute
        ResponseEntity<?> response = shjFileProcessor.processFile(file, testApiUrl, testFoundationUrl);

        // Verify
        assertEquals(HttpStatus.OK, response.getStatusCode());
        verify(taskProcessor).process(any(), any());
    }

    @Test
    void processFile_NewCaseWithVerification_Success() throws Exception {
        // Setup
        MockMultipartFile file = createTestFile("test.json", validJson);
        OdmResponse odmResponse = createOdmResponse(false, true);
        Map<String, Object> verifyResponse = Map.of("totalCount", 1);
        
        when(odmService.callOdmService(any(), any(), any(), any()))
            .thenReturn(ResponseEntity.ok(odmResponse));
        when(verifyMemberProcessor.process(any(), any()))
            .thenReturn(ResponseEntity.ok(verifyResponse));
        when(caseProcessor.process(any(), any())).thenReturn(ResponseEntity.ok().build());

        // Execute
        ResponseEntity<?> response = shjFileProcessor.processFile(file, testApiUrl, testFoundationUrl);

        // Verify
        assertEquals(HttpStatus.OK, response.getStatusCode());
        verify(verifyMemberProcessor).process(any(), any());
        verify(caseProcessor).process(any(), any());
    }

    @Test
    void processFile_NewCaseWithFoundationModel_Success() throws Exception {
        // Setup
        MockMultipartFile file = createTestFile("test.json", validJson);
        OdmResponse odmResponse = createOdmResponse(false, true);
        Map<String, Object> verifyResponse = Map.of("totalCount", 0);
        Map<String, Object> foundationResponse = Map.of("UpsertedAccount", "123");
        
        when(odmService.callOdmService(any(), any(), any(), any()))
            .thenReturn(ResponseEntity.ok(odmResponse));
        when(verifyMemberProcessor.process(any(), any()))
            .thenReturn(ResponseEntity.ok(verifyResponse));
        when(foundationModelService.runService(any(), any(), any(), any()))
            .thenReturn(ResponseEntity.ok(foundationResponse));
        when(caseProcessor.process(any(), any())).thenReturn(ResponseEntity.ok().build());

        // Execute
        ResponseEntity<?> response = shjFileProcessor.processFile(file, testApiUrl, testFoundationUrl);

        // Verify
        assertEquals(HttpStatus.OK, response.getStatusCode());
        verify(foundationModelService).runService(any(), any(), any(), any());
    }

    // ========== ERROR SCENARIOS ==========

    @Test
    void processFile_IOException() throws Exception {
        // Setup
        MockMultipartFile file = createTestFile("test.json", validJson);
        when(objectMapper.readValue(any(byte[].class), eq(ShjRequest.class)))
            .thenThrow(new IOException("File read error"));

        // Execute
        ResponseEntity<?> response = shjFileProcessor.processFile(file, testApiUrl, testFoundationUrl);

        // Verify
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertTrue(response.getBody() instanceof Map);
    }

    @Test
    void processFile_JsonProcessingException() throws Exception {
        // Setup
        MockMultipartFile file = createTestFile("test.json", validJson);
        when(objectMapper.writeValueAsString(any())).thenThrow(new JsonProcessingException("Error") {});

        // Execute
        ResponseEntity<?> response = shjFileProcessor.processFile(file, testApiUrl, testFoundationUrl);

        // Verify
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    }

    @Test
    void processFile_OdmServiceNullResponse() throws Exception {
        // Setup
        MockMultipartFile file = createTestFile("test.json", validJson);
        when(odmService.callOdmService(any(), any(), any(), any()))
            .thenReturn(ResponseEntity.ok(null));

        // Execute
        ResponseEntity<?> response = shjFileProcessor.processFile(file, testApiUrl, testFoundationUrl);

        // Verify
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }

    @Test
    void processFile_InvalidCaseAction() throws Exception {
        // Setup
        MockMultipartFile file = createTestFile("test.json", validJson);
        OdmResponse odmResponse = createOdmResponse(false, false);
        when(odmService.callOdmService(any(), any(), any(), any()))
            .thenReturn(ResponseEntity.ok(odmResponse));

        // Execute
        ResponseEntity<?> response = shjFileProcessor.processFile(file, testApiUrl, testFoundationUrl);

        // Verify
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    }

    @Test
    void processFile_FoundationModelServiceError() throws Exception {
        // Setup
        MockMultipartFile file = createTestFile("test.json", validJson);
        OdmResponse odmResponse = createOdmResponse(false, true);
        Map<String, Object> verifyResponse = Map.of("totalCount", 0);
        
        when(odmService.callOdmService(any(), any(), any(), any()))
            .thenReturn(ResponseEntity.ok(odmResponse));
        when(verifyMemberProcessor.process(any(), any()))
            .thenReturn(ResponseEntity.ok(verifyResponse));
        when(foundationModelService.runService(any(), any(), any(), any()))
            .thenReturn(ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of("error", "Bad request")));

        // Execute
        ResponseEntity<?> response = shjFileProcessor.processFile(file, testApiUrl, testFoundationUrl);

        // Verify
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    }

    @Test
    void processFile_ServiceException() throws Exception {
        // Setup
        MockMultipartFile file = createTestFile("test.json", validJson);
        when(objectMapper.readValue(any(byte[].class), eq(ShjRequest.class)))
            .thenThrow(new ServiceException("Service error"));

        // Execute
        ResponseEntity<?> response = shjFileProcessor.processFile(file, testApiUrl, testFoundationUrl);

        // Verify
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }

    @Test
    void handleCaseResponse_Success() {
        // Setup
        Map<String, Object> verifyResponse = Map.of("totalCount", 1);
        ResponseEntity<?> caseResponse = ResponseEntity.ok(Map.of("caseId", "123"));

        // Execute
        ResponseEntity<?> response = shjFileProcessor.handleCaseResponse(caseResponse, verifyResponse);

        // Verify
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertTrue(response.getBody() instanceof Map);
    }

    @Test
    void handleCaseResponse_BadRequest() {
        // Setup
        Map<String, Object> verifyResponse = Map.of("totalCount", 1);
        ResponseEntity<?> caseResponse = ResponseEntity.badRequest().body("Error");

        // Execute
        ResponseEntity<?> response = shjFileProcessor.handleCaseResponse(caseResponse, verifyResponse);

        // Verify
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    }

    // ========== HELPER METHODS ==========

    private MockMultipartFile createTestFile(String filename, String content) {
        return new MockMultipartFile(
            "file",
            filename,
            "application/json",
            content.getBytes()
        );
    }

    private ShjRequest createTestShjRequest() {
        ShjRequest request = new ShjRequest();
        ShjRequest.Shj shj = new ShjRequest.Shj();
        ShjRequest.ShjMember member = new ShjRequest.ShjMember();
        ShjRequest.MemberIdentifier identifier = new ShjRequest.MemberIdentifier();
        ShjRequest.ShjCase shjCase = new ShjRequest.ShjCase();
        
        identifier.setMembershipId("123");
        identifier.setProxyId("456");
        member.setMemberIdentifier(identifier);
        shjCase.setCaseAction("new");
        shjCase.setShjID("789");
        member.setShjCase(shjCase);
        shj.setShjMember(member);
        request.getShj().add(shj);
        
        return request;
    }

    private OdmResponse createOdmResponse(boolean createTask, boolean createCase) {
        OdmResponse response = new OdmResponse();
        OdmResponse.OpportunityResponseDetails details = new OdmResponse.OpportunityResponseDetails();
        OdmResponse.ShjOpportunityDetails shjDetails = new OdmResponse.ShjOpportunityDetails();
        
        shjDetails.setCreateTask(createTask);
        shjDetails.setCreateCase(createCase);
        details.setShjOpportunityDetails(shjDetails);
        response.setOpportunityResponseDetails(details);
        
        return response;
    }
}
